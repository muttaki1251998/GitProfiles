{"ast":null,"code":"var _jsxFileName = \"/home/muttaki/sdfsa/components/Charts.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { buildChart, langColors, backgroundColor, borderColor } from '../utils';\nimport ChartsStyles from './styles/ChartsStyles';\nimport { Section } from '../style';\n\nvar Charts = function Charts(_ref) {\n  var langData = _ref.langData,\n      repoData = _ref.repoData;\n\n  // Create chart with langData\n  var _useState = useState(null),\n      langChartData = _useState[0],\n      setLangChartData = _useState[1];\n\n  var initLangChart = function initLangChart() {\n    var ctx = document.getElementById('langChart');\n    var labels = langData.map(function (lang) {\n      return lang.label;\n    });\n    var data = langData.map(function (lang) {\n      return lang.value;\n    });\n    setLangChartData(data);\n\n    if (data.length > 0) {\n      var _backgroundColor = langData.map(function (_ref2) {\n        var color = _ref2.color;\n        return \"#\".concat(color.length > 4 ? color.slice(1) : color.slice(1).repeat(2), \"B3\");\n      });\n\n      var _borderColor = langData.map(function (lang) {\n        return \"\".concat(lang.color);\n      });\n\n      var chartType = 'pie';\n      var axes = false;\n      var legend = true;\n      var config = {\n        ctx: ctx,\n        chartType: chartType,\n        labels: labels,\n        data: data,\n        backgroundColor: _backgroundColor,\n        borderColor: _borderColor,\n        axes: axes,\n        legend: legend\n      };\n      buildChart(config);\n    }\n  }; // Create Most Starred chart\n\n\n  var _useState2 = useState(null),\n      starChartData = _useState2[0],\n      setStarChartData = _useState2[1];\n\n  var initStarChart = function initStarChart() {\n    var ctx = document.getElementById('starChart');\n    var LIMIT = 5;\n    var sortProperty = 'stargazers_count';\n    var mostStarredRepos = repoData.filter(function (repo) {\n      return !repo.fork;\n    }).sort(function (a, b) {\n      return b[sortProperty] - a[sortProperty];\n    }).slice(0, LIMIT);\n    var labels = mostStarredRepos.map(function (repo) {\n      return repo.name;\n    });\n    var data = mostStarredRepos.map(function (repo) {\n      return repo[sortProperty];\n    });\n    setStarChartData(data);\n\n    if (data.length > 0) {\n      var chartType = 'bar';\n      var axes = true;\n      var legend = false;\n      var config = {\n        ctx: ctx,\n        chartType: chartType,\n        labels: labels,\n        data: data,\n        backgroundColor: backgroundColor,\n        borderColor: borderColor,\n        axes: axes,\n        legend: legend\n      };\n      buildChart(config);\n    }\n  }; // Create Stars per language chart\n\n\n  var _useState3 = useState(null),\n      thirdChartData = _useState3[0],\n      setThirdChartData = _useState3[1];\n\n  var initThirdChart = function initThirdChart() {\n    var ctx = document.getElementById('thirdChart');\n    var filteredRepos = repoData.filter(function (repo) {\n      return !repo.fork && repo.stargazers_count > 0;\n    });\n    var uniqueLangs = new Set(filteredRepos.map(function (repo) {\n      return repo.language;\n    }));\n    var labels = Array.from(uniqueLangs.values()).filter(function (l) {\n      return l;\n    });\n    var data = labels.map(function (lang) {\n      var repos = filteredRepos.filter(function (repo) {\n        return repo.language === lang;\n      });\n      var starsArr = repos.map(function (r) {\n        return r.stargazers_count;\n      });\n      var starSum = starsArr.reduce(function (a, b) {\n        return a + b;\n      }, 0);\n      return starSum;\n    });\n    setThirdChartData(data);\n\n    if (data.length > 0) {\n      var chartType = 'doughnut';\n      var axes = false;\n      var legend = true;\n\n      var _borderColor2 = labels.map(function (label) {\n        return langColors[label];\n      });\n\n      var _backgroundColor2 = _borderColor2.map(function (color) {\n        return \"\".concat(color, \"B3\");\n      });\n\n      var config = {\n        ctx: ctx,\n        chartType: chartType,\n        labels: labels,\n        data: data,\n        backgroundColor: _backgroundColor2,\n        borderColor: _borderColor2,\n        axes: axes,\n        legend: legend\n      };\n      buildChart(config);\n    }\n  };\n\n  useEffect(function () {\n    if (langData.length && repoData.length) {\n      initLangChart();\n      initStarChart();\n      initThirdChart();\n    }\n  }, []);\n  var chartSize = 300;\n  var langChartError = !(langChartData && langChartData.length > 0);\n  var starChartError = !(starChartData && starChartData.length > 0);\n  var thirdChartError = !(thirdChartData && thirdChartData.length > 0);\n  return __jsx(Section, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(ChartsStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, __jsx(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Top Languages\")), __jsx(\"div\", {\n    className: \"chart-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, langChartError && __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Nothing to see here!\"), __jsx(\"canvas\", {\n    id: \"langChart\",\n    width: chartSize,\n    height: chartSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, __jsx(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Most Starred\")), __jsx(\"div\", {\n    className: \"chart-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, starChartError && __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Nothing to see here!\"), __jsx(\"canvas\", {\n    id: \"starChart\",\n    width: chartSize,\n    height: chartSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, __jsx(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Stars per Language\")), __jsx(\"div\", {\n    className: \"chart-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, thirdChartError && __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Nothing to see here!\"), __jsx(\"canvas\", {\n    id: \"thirdChart\",\n    width: chartSize,\n    height: chartSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })))));\n};\n\nCharts.propTypes = {\n  langData: PropTypes.array.isRequired,\n  repoData: PropTypes.array.isRequired\n};\nexport default Charts;","map":{"version":3,"sources":["/home/muttaki/sdfsa/components/Charts.js"],"names":["React","useState","useEffect","PropTypes","buildChart","langColors","backgroundColor","borderColor","ChartsStyles","Section","Charts","langData","repoData","langChartData","setLangChartData","initLangChart","ctx","document","getElementById","labels","map","lang","label","data","value","length","color","slice","repeat","chartType","axes","legend","config","starChartData","setStarChartData","initStarChart","LIMIT","sortProperty","mostStarredRepos","filter","repo","fork","sort","a","b","name","thirdChartData","setThirdChartData","initThirdChart","filteredRepos","stargazers_count","uniqueLangs","Set","language","Array","from","values","l","repos","starsArr","r","starSum","reduce","chartSize","langChartError","starChartError","thirdChartError","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { buildChart, langColors, backgroundColor, borderColor } from '../utils';\nimport ChartsStyles from './styles/ChartsStyles';\nimport { Section } from '../style';\n\nconst Charts = ({ langData, repoData }) => {\n  // Create chart with langData\n  const [langChartData, setLangChartData] = useState(null);\n  const initLangChart = () => {\n    const ctx = document.getElementById('langChart');\n    const labels = langData.map(lang => lang.label);\n    const data = langData.map(lang => lang.value);\n\n    setLangChartData(data);\n\n    if (data.length > 0) {\n      const backgroundColor = langData.map(\n        ({ color }) => `#${color.length > 4 ? color.slice(1) : color.slice(1).repeat(2)}B3`,\n      );\n      const borderColor = langData.map(lang => `${lang.color}`);\n      const chartType = 'pie';\n      const axes = false;\n      const legend = true;\n      const config = { ctx, chartType, labels, data, backgroundColor, borderColor, axes, legend };\n      buildChart(config);\n    }\n  };\n\n  // Create Most Starred chart\n  const [starChartData, setStarChartData] = useState(null);\n  const initStarChart = () => {\n    const ctx = document.getElementById('starChart');\n    const LIMIT = 5;\n    const sortProperty = 'stargazers_count';\n    const mostStarredRepos = repoData\n      .filter(repo => !repo.fork)\n      .sort((a, b) => b[sortProperty] - a[sortProperty])\n      .slice(0, LIMIT);\n    const labels = mostStarredRepos.map(repo => repo.name);\n    const data = mostStarredRepos.map(repo => repo[sortProperty]);\n\n    setStarChartData(data);\n\n    if (data.length > 0) {\n      const chartType = 'bar';\n      const axes = true;\n      const legend = false;\n      const config = { ctx, chartType, labels, data, backgroundColor, borderColor, axes, legend };\n      buildChart(config);\n    }\n  };\n\n  // Create Stars per language chart\n  const [thirdChartData, setThirdChartData] = useState(null);\n  const initThirdChart = () => {\n    const ctx = document.getElementById('thirdChart');\n    const filteredRepos = repoData.filter(repo => !repo.fork && repo.stargazers_count > 0);\n    const uniqueLangs = new Set(filteredRepos.map(repo => repo.language));\n    const labels = Array.from(uniqueLangs.values()).filter(l => l);\n    const data = labels.map(lang => {\n      const repos = filteredRepos.filter(repo => repo.language === lang);\n      const starsArr = repos.map(r => r.stargazers_count);\n      const starSum = starsArr.reduce((a, b) => a + b, 0);\n      return starSum;\n    });\n\n    setThirdChartData(data);\n\n    if (data.length > 0) {\n      const chartType = 'doughnut';\n      const axes = false;\n      const legend = true;\n      const borderColor = labels.map(label => langColors[label]);\n      const backgroundColor = borderColor.map(color => `${color}B3`);\n      const config = { ctx, chartType, labels, data, backgroundColor, borderColor, axes, legend };\n      buildChart(config);\n    }\n  };\n\n  useEffect(() => {\n    if (langData.length && repoData.length) {\n      initLangChart();\n      initStarChart();\n      initThirdChart();\n    }\n  }, []);\n\n  const chartSize = 300;\n  const langChartError = !(langChartData && langChartData.length > 0);\n  const starChartError = !(starChartData && starChartData.length > 0);\n  const thirdChartError = !(thirdChartData && thirdChartData.length > 0);\n\n  return (\n    <Section>\n      <ChartsStyles>\n        <div className=\"chart\">\n          <header>\n            <h2>Top Languages</h2>\n          </header>\n\n          <div className=\"chart-container\">\n            {langChartError && <p>Nothing to see here!</p>}\n            <canvas id=\"langChart\" width={chartSize} height={chartSize} />\n          </div>\n        </div>\n\n        <div className=\"chart\">\n          <header>\n            <h2>Most Starred</h2>\n          </header>\n          <div className=\"chart-container\">\n            {starChartError && <p>Nothing to see here!</p>}\n            <canvas id=\"starChart\" width={chartSize} height={chartSize} />\n          </div>\n        </div>\n\n        <div className=\"chart\">\n          <header>\n            <h2>Stars per Language</h2>\n          </header>\n          <div className=\"chart-container\">\n            {thirdChartError && <p>Nothing to see here!</p>}\n            <canvas id=\"thirdChart\" width={chartSize} height={chartSize} />\n          </div>\n        </div>\n      </ChartsStyles>\n    </Section>\n  );\n};\n\nCharts.propTypes = {\n  langData: PropTypes.array.isRequired,\n  repoData: PropTypes.array.isRequired,\n};\n\nexport default Charts;\n"]},"metadata":{},"sourceType":"module"}